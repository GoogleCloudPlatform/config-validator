# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: cfgcpstorageloggingconstraint
spec:
  crd:
    spec:
      names:
        kind: CFGCPStorageLoggingConstraint
      validation:
        openAPIV3Schema:
          type: "object"
          properties: {}
  targets:
    - target: "validation.gcp.forsetisecurity.org"
      rego: |
        #
        # Copyright 2018 Google LLC
        #
        # Licensed under the Apache License, Version 2.0 (the "License");
        # you may not use this file except in compliance with the License.
        # You may obtain a copy of the License at
        #
        #      http://www.apache.org/licenses/LICENSE-2.0
        #
        # Unless required by applicable law or agreed to in writing, software
        # distributed under the License is distributed on an "AS IS" BASIS,
        # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        # See the License for the specific language governing permissions and
        # limitations under the License.
        #

        package templates.gcp.GCPStorageLoggingConstraint

        violation[{
        	"msg": message,
        	"details": metadata,
        }] {
        	asset := input.review
        	asset.asset_type == "storage.googleapis.com/Bucket"

        	bucket := asset.resource.data
        	destination := destination_bucket(bucket)
        	destination == ""

        	message := sprintf("%v does not have the required logging destination.", [asset.name])
        	metadata := {
        		"destination_bucket": destination,
        		"resource": asset.name,
        	}
        }

        ###########################
        # Rule Utilities
        ###########################
        destination_bucket(bucket) = destination_bucket {
        	destination := get_default(bucket, "logging", "default")
        	destination_bucket := get_default(destination, "logBucket", "")
        }

        # has_field returns whether an object has a field
        has_field(object, field) {
        	object[field]
        }

        # False is a tricky special case, as false responses would create an undefined document unless
        # they are explicitly tested for
        has_field(object, field) {
        	object[field] == false
        }

        has_field(object, field) = false {
        	not object[field]
         	not object[field] == false
        }

        # get_default returns the value of an object's field or the provided default value.
        # It avoids creating an undefined state when trying to access an object attribute that does
        # not exist
        get_default(object, field, _default) = output {
        	has_field(object, field)
        	output = object[field]
        }

        get_default(object, field, _default) = output {
        	has_field(object, field) == false
        	output = _default
        }
